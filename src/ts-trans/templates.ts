/**
 * Sync to go-const-ts templates!
 */

// data: null
// file: pipe/index-base.pipe.ts
export const indexBasePipeTpl = `// Generated by node-private-tools
import { Pipe, PipeTransform } from '@angular/core';
import { XlangJsonService } from 'ng-ef-sand/xlang';

export abstract class IndexBasePipe implements PipeTransform {
  private tr: string[] = [];
  private sub: any;

  constructor(private xlangJsonService: XlangJsonService, private xlangId: string) { }

  transform(index: number) {
    if (!this.sub) {
      this.sub = this.xlangJsonService.load(this.xlangId).subscribe(tr => this.tr = tr.json);
    }
    return this.tr[index] || '';
  }

  ngOnDestroy() {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }
}
`;

// data: ConstType: {type, pipe}
// file: pipe/{pipe}.pipe.ts
// xlangId: {pipe}
export const pipeTpl = `// Generated by node-private-tools
import { Pipe, PipeTransform } from '@angular/core';
import { XlangJsonService } from 'ng-ef-sand/xlang';
import { IndexBasePipe } from './index-base.pipe';

@Pipe({
  name: '{{{pipe}}}',
  pure: false,
})
export class {{{type}}}Pipe extends IndexBasePipe implements PipeTransform {
  constructor(xlangJsonService: XlangJsonService) {
    super(xlangJsonService, '{{{pipe}}}');
  }
}
`;

// data: ConstType[]: {type, pipe}[] as types
// file: pipe.ts
export const pipeIndexTpl = `// Generated by node-private-tools
import { NgModule } from '@angular/core';

{{#each types}}import { {{{type}}}Pipe } from './pipe/{{{pipe}}}.pipe';
{{/each}}

export {
{{#each types}}  {{{type}}}Pipe,
{{/each}}
}

export const TS_TRANS_PIPES = [
{{#each types}}  {{{type}}}Pipe,
{{/each}}
];

@NgModule({
  declarations: [
    ...TS_TRANS_PIPES,
  ]
})
export class TsTransPipesRootModule { }
`;

// xlangJson
// data: Dict<string>
// file: xlang/{pipe}/{lang}.json
